#!/usr/bin/env groovy

pipeline {

    agent {
        kubernetes {
            inheritFrom 'build-service-pod'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    job: build-service
spec:
  containers:
  - name: kubectl
    image: bitnami/kubectl:1.24.12
    command:
    - "top"
    - "node"
#    tty: true
  - name: docker
    image: docker:18.09.2
    envFrom:
      - secretRef:
          name: docker-secret2
    command: ["cat"]
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
    - name: docker-config
      mountPath: /root/.docker/
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: docker-config
    secret:
      secretName: dockercred
      items:
        - key: .dockerconfigjson
          path: config.json
"""
        }
    }
    triggers { pollSCM('* * * * *') }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
        skipDefaultCheckout true
    }
    environment {
    //BUILD_TAG_NAME = '${BUILD_NUMBER}'
    //TAG_NAME = sh(returnStdout: true, script: "git describe --tags").trim()
    //IMAGE_BASE = '${DOCKER_REPO}/${IMAGE_NAME}'
    DOCKER_REPO = 'dmi3x3'
    IMAGE_NAME = 'app_web'
    }

    stages {
        stage ('checkout') {
            steps {
                script {
                    //def repo =
                    //def TAG_NAME = sh(returnStdout: true, script: "git --no-pager tag --points-at HEAD").trim()
                    checkout scm
                    rev = sh(script: 'git log -1 --format=\'%h.%ad\' --date=format:%Y%m%d-%H%M | cat', returnStdout: true).trim()
                    rev1 = isVersionTag(readCurrentTag())
                    TAG_NAME = readCurrentTag()
                    revision = "${BUILD_NUMBER}-${rev}"
                    //rev_build = buildingTag()
                    sh """
                    echo 'Building revision: ${revision} build_tag: ${TAG_NAME} gt: ${rev1}'
                    """
                }
            }
        }
        stage("Build Docker Image") {
            when { triggeredBy 'SCMTrigger' }
            steps {
                container('docker') {
                    sh """
                    df -h && ls -lh / && ls -lh /run/secrets/kubernetes.io/serviceaccount && docker build -t ${DOCKER_REPO}/${IMAGE_NAME}:${revision} .
                    """
                }
            }
        }
        stage("BUILD Docker Image with Tag") {
            when { expression { isVersionTag(readCurrentTag()) }}
            steps {
                container('docker') {
                	sh """
                    docker build -t ${DOCKER_REPO}/${IMAGE_NAME}:$TAG_NAME .
                    """
                }
            }
        }
        stage("Docker Push") {
            when { triggeredBy 'SCMTrigger' }
            steps {
                container('docker') {
                    sh """
                    docker push ${DOCKER_REPO}/${IMAGE_NAME}:${revision}
                    """
                }
            }
        }
        stage("Docker Push with Tag") {
            when { expression { isVersionTag(readCurrentTag()) }}
            steps {
                container('docker') {
                	sh """
                    docker push ${DOCKER_REPO}/${IMAGE_NAME}:$TAG_NAME
                    """
                }
            }
        }
        stage('Run kubectl') {
            steps {
                container('kubectl') {

                        sh """
                        get pods
                        """

                }
            }
        }
    }
}

def boolean isVersionTag(String tag) {
    echo "checking version tag $tag"

   // script {
        if (tag.length() == 0) {
            echo 'tag null'
            return false
        } else {
        echo 'tag not null'
        return true
        }
   // }
}

// workaround https://issues.jenkins-ci.org/browse/JENKINS-55987
def String readCurrentTag() {

    return sh(returnStdout: true, script: "git --no-pager tag --points-at HEAD").trim()
}