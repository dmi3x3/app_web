#!/usr/bin/env groovy

def branch
def revision
def registryIp
//def username = System.getenv('username')
//def password = System.getenv('password')


pipeline {

    agent {
        kubernetes {
            label 'build-service-pod'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    job: build-service
spec:
  containers:
  - name: docker
    image: docker:18.09.2
    envFrom:
      - secretRef:
          name: docker-secret2
    command: ["cat"]
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }
//    options {
//        skipDefaultCheckout true
//
//    }
    triggers { pollSCM('* * * * *') }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
        skipDefaultCheckout true
    }
    stages {
        stage ('checkout') {
            steps {
                script {
                    def repo = checkout scm
                    revision = sh(script: 'git log -1 --format=\'%h.%ad\' --date=format:%Y%m%d-%H%M | cat', returnStdout: true).trim()
                    branch = repo.GIT_BRANCH.take(20).replaceAll('/', '_')
                    if (branch != 'main') {
                        revision += "-${branch}"
                    }
                    sh "echo 'Building revision: ${revision}'"
                }
            }

        }
        stage ('build artifact') {
            steps {
                container('docker') {
                    script {
                        sh "docker build . -t dmi3x3/app_web:${revision} --build-arg REVISION=${revision}"
                    }
                }
            }
        }
        stage ('publish artifact') {

            when {
                expression {
                    branch != 'main'
                }
            }
            steps {
                container('docker') {

                    script {
                    maskPasswords(varMaskRegexes: [[regex: '-u.*'], [regex: '-p.*']]) {
                        //sh """ printenv """
                        def DOCKER_U= sh(returnStdout: true, script: 'echo ${DOCKER_USR}').trim()
                        def DOCKER_P= sh(returnStdout: true, script: 'echo ${DOCKER_PASS}').trim()
                        //maskPasswords(varMaskRegexes: [[regex: '\-u.*'], [regex: '\-p.*']]) {

                            sh """
                            echo docker login -u ${DOCKER_U} -p ${DOCKER_P}
                            """
                    }
                    //&& docker push dmi3x3/app_web:${revision}
                    }
                }
            }
        }
    }
}